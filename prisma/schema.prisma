// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id Int @id @default(autoincrement())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

model User {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String   @unique
  password_hash String
  reptiles      Reptile[]
  schedules     Schedule[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Reptile {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  species         String
  name            String
  sex             String
  feedings        Feeding[]
  husbandryRecords HusbandryRecord[]
  schedules       Schedule[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Feeding {
  id              Int @id @default(autoincrement())
  reptileId       Int
  reptile         Reptile @relation(fields: [reptileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  foodItem        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model HusbandryRecord {
  id              Int @id @default(autoincrement())
  reptileId       Int
  reptile         Reptile @relation(fields: [reptileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  length          Float
  weight          Float
  temperature     Float
  humidity        Float 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Schedule {
  id              Int @id @default(autoincrement())
  reptileId       Int?
  reptile         Reptile?  @relation(fields: [reptileId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  type            String
  description     String
  monday          Boolean
  tuesday         Boolean
  wednesday       Boolean
  thursday        Boolean
  friday          Boolean
  saturday        Boolean
  sunday          Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
